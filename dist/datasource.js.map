{"version":3,"sources":["../src/datasource.js"],"names":["_","StatseekerDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","basicAuth","withCredentials","q","options","command","buildCommand","runRequest","then","processQueryResult","resp","res","err","data","message","config","success","objects","length","status","errmsg","request","method","headers","Authorization","datasourceRequest","title","query","describeQuery","segments","json","Promise","resolve","match","replace","split","i","output","forOwn","val","key","push","text","value","attempt","JSON","parse","isError","fields","isArray","targets","txt","rows","columns","isNaN","range","intervalMs","maxDataPoints","from","to","interval","Math","trunc","valueOf","grafana_start","grafana_finish","j","k","timefilter","target","obj","opts","object_opts","alias","field","getTimefilter","rawMode","rawQuery","object","hide","limit","offset","scopedVars","parseInt","toString","grafana_output","formatJSONTemplate","merge","adv_filter","filter","formatSQLTemplate","startsWith","join","format","grafana_format","formats","filters","sortby","sort","priority","order","cloneDeep","id","user","result","concat","processQueryResultTimeseries","mergeTableResults","processQueryResultTable","table","cmdObj","resObj","time","subname","datapoints","rowData","hasOwnProperty","row","column","desc","grafana_timestamp","variable","fn","stringify"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class StatseekerDatasource {\n\n   constructor(instanceSettings, $q, backendSrv, templateSrv) {\n      this.type            = instanceSettings.type;\n      this.url             = instanceSettings.url;\n      this.name            = instanceSettings.name;\n      this.basicAuth       = instanceSettings.basicAuth;\n      this.withCredentials = instanceSettings.withCredentials;\n      this.q               = $q;\n      this.backendSrv      = backendSrv;\n      this.templateSrv     = templateSrv;\n   }\n\n   query(options) {\n      var command = this.buildCommand(options);\n\n      return this.runRequest(this.url, 'POST', command).then(resp => {\n         return this.processQueryResult(command, resp);\n      },\n      err => {\n         var res;\n\n         if ( ! err.data || ! err.data.data) {\n            throw {message: 'Request failed', data: err.data, config: err.config};\n         }\n         res = err.data.data;\n         if ( ! res.success) {\n            if (res.objects.length === 1) {\n               throw {message: res.objects[0].status.errmsg, data: err.data, config: err.config};\n            }\n            else {\n               throw {message: res.errmsg, data: err.data, config: err.config};\n            }\n         }\n      });\n   }\n\n   runRequest(url, type, data) {\n      /* Setup the request */\n      var request = {\n         url,\n         method: type,\n         headers: {'content-type': 'application/json'},\n         withCredentials: this.withCredentials\n      };\n\n      if (this.basicAuth) {\n         request.headers.Authorization = this.basicAuth;\n      }\n      if (data) {\n         request.data = data;\n      }\n\n      /* Run the request */\n      return this.backendSrv.datasourceRequest(request).then(resp => {\n         return resp;\n      });\n   }\n\n   testDatasource() {\n      return this.runRequest(this.url, 'OPTIONS').then(resp => {\n         if (resp.status === 200) {\n            return {status: 'success', message: 'Data source is working', title: 'Success'};\n         }\n\n         return {status: 'error', message: 'Error connecting to server', title: 'Error'};\n      });\n   }\n\n   metricFindQuery(query) {\n      var describeQuery, segments, json;\n\n      if ( ! query) {\n         Promise.resolve([]);\n      }\n\n      describeQuery = query.match(/^DESCRIBE (.+)/);\n      if (describeQuery) {\n         describeQuery[1] = this.templateSrv.replace(describeQuery[1]);\n         segments = describeQuery[1].split('.');\n\n         return this.runRequest(this.url + '/' + segments[0] + '/describe?links=none', 'GET').then(resp => {\n            var i, res;\n            var output = [];\n\n            if ( ! resp.data || ! resp.data.data || ! resp.data.data.objects) {\n               throw {message: 'Malformed API response'};\n            }\n            res = resp.data.data.objects[0];\n            for (i = 1; i < segments.length; i++) {\n               if (res[segments[i]]) {\n                  res = res[segments[i]];\n               }\n               else {\n                  throw {message: 'Unknown segment (' + segments[i] + ') in DESCRIBE request'};\n               }\n            }\n\n            _.forOwn(res, (val, key) => {\n               output.push({text: key, value: key});\n            });\n\n            return output;\n         },\n         err => {\n            var res;\n\n            if ( ! err.data || ! err.data.data) {\n               throw {message: 'Request failed', data: err.data, config: err.config};\n            }\n            res = err.data.data;\n            if ( ! res.success) {\n               if (res.objects.length === 1) {\n                  throw {message: res.objects[0].status.errmsg, data: err.data, config: err.config};\n               }\n               else {\n                  throw {message: res.errmsg, data: err.data, config: err.config};\n               }\n            }\n         });\n      }\n\n      json = _.attempt(JSON.parse, query);\n      if ( ! _.isError(json)) {\n         if ( ! json.fields || ! _.isArray(json.fields) || json.fields.length === 0) {\n            throw {message: 'JSON query missing fields array'};\n         }\n\n         return this.query({targets: [json]}).then(resp => {\n            var i, val, txt;\n            var output = [];\n\n            if ( ! resp.data || resp.data.length === 0) {\n               return output;\n            }\n            else if ( ! resp.data[0].rows || ! resp.data[0].columns) {\n               throw {message: 'Query must be a \"table\" type'};\n            }\n            else if (resp.data[0].columns.length === 0 || resp.data[0].rows.length === 0) {\n               return output;\n            }\n\n            for (i = 0; i < resp.data[0].rows.length; i++) {\n               val = resp.data[0].rows[i][0];\n               txt = resp.data[0].columns.length > 1 ? resp.data[0].rows[i][1] : resp.data[0].rows[i][0];\n               if ( ! isNaN(val) || typeof val === 'string') {\n                  if ( ! isNaN(txt) || typeof txt === 'string') {\n                     output.push({text: txt, value: val});\n                  }\n               }\n            }\n\n            return output;\n         });\n      }\n\n      return Promise.resolve([]);\n   }\n\n   getTimefilter(range, intervalMs, maxDataPoints) {\n      var from, to, interval;\n\n      if ( ! range) {\n         return null;\n      }\n      from = Math.trunc(range.from.valueOf() / 1000);\n      to = Math.trunc(range.to.valueOf() / 1000);\n      interval = intervalMs / 1000;\n\n      /* The minimum interval is 60s */\n      if (interval < 60) {\n         interval = 60;\n      }\n\n      /* Increase the interval if necessary */\n      if (Math.trunc((to - from) / maxDataPoints) > interval) {\n         interval = Math.trunc((to - from) / maxDataPoints);\n         interval = Math.trunc(interval / 60) * 60;\n      }\n\n      return {\n         query: 'range = ' + from + ' to ' + to,\n         interval,\n         grafana_start: from,\n         grafana_finish: to\n      };\n   }\n\n   buildCommand(options) {\n      var i, j, k, timefilter, target, obj, opts, object_opts, json, alias, field;\n      var objects = [];\n\n      /* Convert the timefilter to valid tfc */\n      timefilter = this.getTimefilter(options.range, options.intervalMs, options.maxDataPoints);\n\n      /* Create the objects */\n      for (i = 0; i < options.targets.length; i++) {\n         target = options.targets[i];\n         if (target.rawMode) {\n            target = _.attempt(JSON.parse, target.rawQuery);\n            if (_.isError(target)) {\n               throw {message: 'Raw query decode failed'};\n            }\n         }\n\n         if ( ! target.object) {\n            throw {message: 'No object provided'};\n         }\n         if (target.hide) {\n            continue;\n         }\n         if (isNaN(target.limit) || isNaN(target.offset)) {\n            throw {message: 'Limit and Offset must be integers'};\n         }\n\n         obj = {\n            type: this.templateSrv.replace(target.object, options.scopedVars),\n            limit: parseInt(this.templateSrv.replace(target.limit.toString(), options.scopedVars)),\n            offset: parseInt(this.templateSrv.replace(target.offset.toString(), options.scopedVars)),\n            grafana_output: target.output,\n            fields: {}\n         };\n\n         /* Add any object options */\n         if (target.object_opts) {\n            object_opts = this.templateSrv.replace(target.object_opts, options.scopedVars, this.formatJSONTemplate);\n            json = _.attempt(JSON.parse, object_opts);\n            if (_.isError(json)) {\n               throw {message: 'Error in Object options: ' + json.message};\n            }\n            obj = _.merge(obj, json);\n         }\n\n         /* Add the global filter */\n         if (target.adv_filter) {\n            obj.filter = this.templateSrv.replace(target.adv_filter, options.scopedVars, this.formatSQLTemplate);\n         }\n\n         /* Add the fields */\n         for (j = 0; j < target.fields.length; j++) {\n            if ( ! target.fields[j].name) {\n               throw {message: 'Field name missing'};\n            }\n\n            alias = target.fields[j].alias ? target.fields[j].alias : target.fields[j].name;\n            field = {\n               field: this.templateSrv.replace(target.fields[j].name, options.scopedVars),\n               hide: target.fields[j].hide\n            };\n\n            if (timefilter) {\n               field.timefilter = timefilter;\n            }\n\n            if (target.fields[j].name.startsWith('cdt_device.')) {\n               if ( ! obj.join) {\n                  obj.join = '{' + obj.type + '.deviceid} = {cdt_device.id}';\n               }\n               field.field = target.fields[j].name.replace('cdt_device.', '');\n               field.object = 'cdt_device';\n            }\n\n            /* Set the format if necessary */\n            if (target.fields[j].format && target.fields[j].format !== 'Select format') {\n               field.grafana_format = this.templateSrv.replace(target.fields[j].format, options.scopedVars);\n               field.formats = [field.grafana_format];\n            }\n\n            /* Check for a filter */\n            if (target.filters) {\n               for (k = 0; k < target.filters.length; k++) {\n                  if (target.filters[k].field === alias) {\n                     field.filter = {query: this.templateSrv.replace(target.filters[k].query, options.scopedVars, this.formatSQLTemplate)};\n                     if (target.filters[k].format !== 'Select format') {\n                        field.filter.format = this.templateSrv.replace(target.filters[k].format, options.scopedVars);\n                     }\n                  }\n               }\n            }\n\n            /* Check for sorting */\n            if (target.sortby) {\n               for (k = 0; k < target.sortby.length; k++) {\n                  if (target.sortby[k].field === alias) {\n                     field.sort = {\n                        priority: k + 1,\n                        order: target.sortby[k].order\n                     };\n                     if (target.sortby[k].format !== 'Select format') {\n                        field.sort.format = this.templateSrv.replace(target.sortby[k].format, options.scopedVars);\n                     }\n                  }\n               }\n            }\n\n            /* Add any field options */\n            if (target.fields[j].opts) {\n               opts = this.templateSrv.replace(target.fields[j].opts, options.scopedVars, this.formatJSONTemplate);\n               json = _.attempt(JSON.parse, opts);\n               if (_.isError(json)) {\n                  throw {message: 'Error in ' + alias + ' options: ' + json.message};\n               }\n               field = _.merge(field, json);\n            }\n\n            opts = this.templateSrv.replace(target.fields[j].name, options.scopedVars, this.formatJSONTemplate);\n            json = _.attempt(JSON.parse, opts);\n            if (_.isArray(json)) {\n               /* Field is a multi-value, so add each field in the list */\n               for (k = 0; k < json.length; k++) {\n                  alias = target.fields[j].alias ? target.fields[j].alias + ' ' + json[k] : json[k];\n                  if (obj.fields[alias]) {\n                     throw {message: 'Duplicate field names defined (' + alias + ')'};\n                  }\n                  obj.fields[alias] = _.cloneDeep(field);\n                  obj.fields[alias].field = json[k];\n               }\n            }\n            else {\n               /* Field is a single value */\n               alias = this.templateSrv.replace(alias, options.scopedVars);\n               if (obj.fields[alias]) {\n                  throw {message: 'Duplicate field names defined (' + alias + ')'};\n               }\n               obj.fields[alias] = field;\n            }\n         }\n\n         /* Make sure the id field is given */\n         if ( ! obj.fields.id) {\n            obj.fields.id = {\n               field: 'id',\n               hide: true\n            };\n         }\n\n         objects.push(obj);\n      }\n\n      return {\n         command: 'get',\n         user: 'admin',\n         objects\n      };\n   }\n\n   processQueryResult(command, result) {\n      var i;\n      var output = {data: []};\n\n      if ( ! result.data || ! result.data.data || ! result.data.data.objects) {\n         throw {message: 'Malformed API response'};\n      }\n\n      /* Loop over each object */\n      for (i = 0; i < result.data.data.objects.length; i++) {\n         if (command.objects[i].grafana_output === 'timeseries') {\n            output.data = _.concat(output.data, this.processQueryResultTimeseries(command.objects[i], result.data.data.objects[i]));\n\n         }\n         else {\n            this.mergeTableResults(output.data, this.processQueryResultTable(command.objects[i], result.data.data.objects[i]));\n         }\n      }\n\n      return output;\n   }\n\n   mergeTableResults(data, table) {\n      var i, j, k;\n\n      if (data.length === 0) {\n         data.push(table);\n\n         return;\n      }\n\n      for (i = 0; i < data.length; i++) {\n         if ( ! data[0].type || data[0].type !== 'table') {\n            continue;\n         }\n\n         /* Add columns */\n         for (j = 0; j < table.columns.length; j++) {\n            data[i].columns.push(table.columns[j]);\n         }\n\n         /* Add rows */\n         for (j = 0; j < data[0].rows.length; j++) {\n            if (j < table.rows.length) {\n               for (k = 0; k < table.columns.length; k++) {\n                  data[0].rows[j].push(table.rows[j][k]);\n               }\n            }\n         }\n      }\n   }\n\n   processQueryResultTimeseries(cmdObj, resObj) {\n      var i, j, time, key, subname, field, value, datapoints, rowData;\n      var result = [];\n\n      /* Loop over the rows */\n      for (i = 0; i < resObj.data.length; i++) {\n\n         /* Loop over each field (that isn't hidden) */\n         subname = null;\n         rowData = [];\n         for (key in cmdObj.fields) {\n            if ( ! cmdObj.fields.hasOwnProperty(key)) {\n               continue;\n            }\n            field = cmdObj.fields[key];\n            value = resObj.data[i][key];\n            if (field.hide) {\n               continue;\n            }\n            if (value === null) {\n               /* Value is null */\n               result.push({target: key, datapoints: []});\n               continue;\n            }\n\n            if (field.grafana_format && typeof value === 'object') {\n               value = value[field.grafana_format];\n            }\n\n            datapoints = [];\n            if (_.isArray(value)) {\n               /* Value is an array */\n               time = field.timefilter.grafana_start;\n               for (j = 0; j < value.length; j++) {\n                  datapoints.push([value[j], time * 1000]);\n                  time += field.timefilter.interval;\n               }\n            }\n            else if ( ! isNaN(value)) {\n               /* Value is a number */\n               for (time = field.timefilter.grafana_start; time <= field.timefilter.grafana_finish; time += field.timefilter.interval) {\n                  datapoints.push([value, time * 1000]);\n               }\n            }\n            else if (typeof value === 'string') {\n               subname = subname ? subname + ' ' + value : value;\n               continue;\n            }\n\n            rowData.push({target: key, datapoints});\n         }\n\n         /* Append the subname if provided */\n         if (subname) {\n            for (j = 0; j < rowData.length; j++) {\n               rowData[j].target = rowData[j].target + ' (' + subname + ')';\n            }\n         }\n         result = _.concat(result, rowData);\n      }\n\n      return result;\n   }\n\n   processQueryResultTable(cmdObj, resObj) {\n      var i, j, row, field, value, column;\n      var result = {\n         columns: [],\n         rows: [],\n         type: 'table'\n      };\n\n      _.forOwn(cmdObj.fields, (val, key) => {\n         if ( ! val.hide) {\n            column = {text: key};\n            if (val.sort && val.sort.priority === 1) {\n               column.sort = true;\n               column.desc = val.sort.order === 'desc';\n            }\n            result.columns.push(column);\n         }\n      });\n\n      /* Loop over the rows */\n      for (i = 0; i < resObj.data.length; i++) {\n         row = [];\n\n         /* Loop over each field (that isn't hidden) */\n         for (j = 0; j < result.columns.length; j++) {\n            field = cmdObj.fields[result.columns[j].text];\n            value = resObj.data[i][result.columns[j].text];\n            if (value === null) {\n               /* Value is null */\n               row.push(null);\n               continue;\n            }\n\n            if (field.grafana_format && typeof value === 'object') {\n               value = value[field.grafana_format];\n            }\n\n            if ( ! isNaN(value) || typeof value === 'string') {\n               /* Value is a scalar */\n               if (field.grafana_timestamp) {\n                  row.push(value * 1000);\n               }\n               else {\n                  row.push(value);\n               }\n            }\n            else {\n               /* Cannot represent value */\n               row.push(null);\n            }\n         }\n\n         result.rows.push(row);\n      }\n\n      return result;\n   }\n\n   formatSQLTemplate(value, variable, fn) {\n      var i;\n      var output = [];\n\n      if (_.isArray(value)) {\n         for (i = 0; i < value.length; i++) {\n            if ( ! isNaN(value[i])) {\n               output.push(value[i]);\n            }\n            else if (typeof value[i] === 'string') {\n               output.push('\\'' + value[i].replace('\\'', '\\'\\'') + '\\'');\n            }\n         }\n\n         return '(' + output.join() + ')';\n      }\n      else if ( ! isNaN(value)) {\n         return value;\n      }\n      else if (typeof value === 'string') {\n         return '\\'' + value.replace('\\'', '\\'\\'') + '\\'';\n      }\n\n      return value;\n   }\n\n   formatJSONTemplate(value, variable, fn) {\n      var i;\n      var output = [];\n\n      if (_.isArray(value)) {\n         for (i = 0; i < value.length; i++) {\n            if ( ! isNaN(value[i])) {\n               output.push(parseInt(value[i]));\n            }\n            else if (typeof value[i] === 'string') {\n               output.push(value[i]);\n            }\n         }\n\n         return JSON.stringify(output);\n      }\n      else if (typeof value === 'string') {\n         return '\"' + value.replace('\"', '\\\\\"') + '\"';\n      }\n\n      return value;\n   }\n\n}\n\n"]}