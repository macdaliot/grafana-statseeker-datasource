{"version":3,"sources":["../src/datasource.js"],"names":["_","StatseekerDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","basicAuth","withCredentials","q","options","command","buildCommand","runRequest","then","processQueryResult","resp","res","err","data","message","config","success","objects","length","status","errmsg","request","method","headers","Authorization","datasourceRequest","title","query","describeQuery","segments","json","Promise","resolve","match","replace","split","i","output","forOwn","val","key","push","text","value","attempt","JSON","parse","isError","fields","isArray","targets","j","txt","tmp_val","rows","columns","hide","isNaN","target","from","to","interval","str","range","Math","trunc","valueOf","intervalMs","maxDataPoints","scopedVars","test","parseInt","grafana_start","grafana_finish","obj","alias","format","timefilter","field","arr","opts","indexOf","object","grafana_format","formats","aggregation_format","pivot_field","filters","filter","formatSQLTemplate","sortby","sort","priority","order","formatJSONTemplate","merge","k","n","object_opts","custom","aggr","fld_json","fmt_json","field_name","fmt","grp","getTimefilter","rawMode","rawQuery","limit","toString","offset","grafana_output","grafana_pivot_field","adv_filter","groups","id","group_by","groupby","buildField","user","result","cmd","row","hasOwnProperty","data_total","concat","processQueryResultTimeseries","processQueryResultTableAsTimeseries","mergeTableResults","processQueryResultTable","table","cmdObj","resObj","t","pivot_val","datapoints","index","tf","getApiValue","floor","time","subname","rowData","column","desc","grafana_timestamp","variable","fn","join","stringify"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class StatseekerDatasource {\n\n   constructor(instanceSettings, $q, backendSrv, templateSrv) {\n      this.type            = instanceSettings.type;\n      this.url             = instanceSettings.url;\n      this.name            = instanceSettings.name;\n      this.basicAuth       = instanceSettings.basicAuth;\n      this.withCredentials = instanceSettings.withCredentials;\n      this.q               = $q;\n      this.backendSrv      = backendSrv;\n      this.templateSrv     = templateSrv;\n   }\n\n   query(options) {\n      var command = this.buildCommand(options);\n\n      return this.runRequest(this.url, 'POST', command).then(resp => {\n         return this.processQueryResult(command, resp);\n      },\n      err => {\n         var res;\n\n         if ( ! err.data || ! err.data.data) {\n            throw {message: 'Request failed', data: err.data, config: err.config};\n         }\n         res = err.data.data;\n         if ( ! res.success) {\n            if (res.objects.length === 1) {\n               throw {message: res.objects[0].status.errmsg, data: err.data, config: err.config};\n            }\n            else {\n               throw {message: res.errmsg, data: err.data, config: err.config};\n            }\n         }\n      });\n   }\n\n   runRequest(url, type, data) {\n      /* Setup the request */\n      var request = {\n         url,\n         method: type,\n         headers: {'content-type': 'application/json'},\n         withCredentials: this.withCredentials\n      };\n\n      if (this.basicAuth) {\n         request.headers.Authorization = this.basicAuth;\n      }\n      if (data) {\n         request.data = data;\n      }\n\n      /* Run the request */\n      return this.backendSrv.datasourceRequest(request).then(resp => {\n         return resp;\n      });\n   }\n\n   testDatasource() {\n      return this.runRequest(this.url, 'OPTIONS').then(resp => {\n         if (resp.status === 200) {\n            return {status: 'success', message: 'Data source is working', title: 'Success'};\n         }\n\n         return {status: 'error', message: 'Error connecting to server', title: 'Error'};\n      });\n   }\n\n   metricFindQuery(query) {\n      var describeQuery, segments, json;\n\n      if ( ! query) {\n         Promise.resolve([]);\n      }\n\n      describeQuery = query.match(/^DESCRIBE (.+)/);\n      if (describeQuery) {\n         describeQuery[1] = this.templateSrv.replace(describeQuery[1]);\n         segments = describeQuery[1].split('.');\n\n         return this.runRequest(this.url + '/' + segments[0] + '/describe?links=none', 'GET').then(resp => {\n            var i, res;\n            var output = [];\n\n            if ( ! resp.data || ! resp.data.data || ! resp.data.data.objects) {\n               throw {message: 'Malformed API response'};\n            }\n            res = resp.data.data.objects[0];\n            for (i = 1; i < segments.length; i++) {\n               if (res[segments[i]]) {\n                  res = res[segments[i]];\n               }\n               else {\n                  throw {message: 'Unknown segment (' + segments[i] + ') in DESCRIBE request'};\n               }\n            }\n\n            _.forOwn(res, (val, key) => {\n               output.push({text: key, value: key});\n            });\n\n            return output;\n         },\n         err => {\n            var res;\n\n            if ( ! err.data || ! err.data.data) {\n               throw {message: 'Request failed', data: err.data, config: err.config};\n            }\n            res = err.data.data;\n            if ( ! res.success) {\n               if (res.objects.length === 1) {\n                  throw {message: res.objects[0].status.errmsg, data: err.data, config: err.config};\n               }\n               else {\n                  throw {message: res.errmsg, data: err.data, config: err.config};\n               }\n            }\n         });\n      }\n\n      json = _.attempt(JSON.parse, query);\n      if ( ! _.isError(json)) {\n         if ( ! json.fields || ! _.isArray(json.fields) || json.fields.length === 0) {\n            throw {message: 'JSON query missing fields array'};\n         }\n\n         return this.query({targets: [json]}).then(resp => {\n            var i, j, val, txt, tmp_val;\n            var output = [];\n\n            if ( ! resp.data || resp.data.length === 0) {\n               return output;\n            }\n            else if ( ! resp.data[0].rows || ! resp.data[0].columns) {\n               throw {message: 'Query must be a \"table\" type'};\n            }\n            else if (resp.data[0].columns.length === 0 || resp.data[0].rows.length === 0) {\n               return output;\n            }\n\n            for (i = 0; i < resp.data[0].rows.length; i++) {\n               val = resp.data[0].rows[i][0];\n               txt = '';\n               for (j = 1; j < resp.data[0].columns.length; j++) {\n                  if (resp.data[0].rows[i][j].hide) {\n                     continue;\n                  }\n                  tmp_val = resp.data[0].rows[i][j];\n                  if ( ! isNaN(tmp_val) || typeof tmp_val === 'string') {\n                     txt += txt.length > 0 ? ' ' + tmp_val : tmp_val;\n                  }\n               }\n               if (resp.data[0].columns.length === 0) {\n                  txt = resp.data[0].rows[i][0];\n               }\n               if ( ! isNaN(val) || typeof val === 'string') {\n                  if ( ! isNaN(txt) || typeof txt === 'string') {\n                     output.push({text: txt, value: val});\n                  }\n               }\n            }\n\n            return output;\n         });\n      }\n\n      return Promise.resolve([]);\n   }\n\n   getTimefilter(options, target) {\n      var from, to, interval, str;\n\n      if ( ! options.range) {\n         return null;\n      }\n      from = Math.trunc(options.range.from.valueOf() / 1000);\n      to = Math.trunc(options.range.to.valueOf() / 1000);\n      interval = options.intervalMs / 1000;\n\n      /* The minimum interval is 60s */\n      if (interval < 60) {\n         interval = 60;\n      }\n\n      /* Increase the interval if necessary */\n      if (Math.trunc((to - from) / options.maxDataPoints) > interval) {\n         interval = Math.trunc((to - from) / options.maxDataPoints);\n         interval = Math.trunc(interval / 60) * 60;\n      }\n\n      if (target.interval) {\n         str = this.templateSrv.replace(target.interval, options.scopedVars);\n\n         /* Decode the interval */\n         if ( ! (/^\\d+[smhd]$/).test(str)) {\n            throw {message: 'Invalid interval \"' + str + '\"'};\n         }\n         interval = parseInt(str);\n         switch (str[str.length - 1]) {\n         case 'm':\n            interval *= 60;\n            break;\n         case 'h':\n            interval *= 3600;\n            break;\n         case 'd':\n            interval *= 86400;\n            break;\n         default:\n            break;\n         }\n      }\n\n      return {\n         query: 'range = ' + from + ' to ' + to,\n         interval,\n         grafana_start: from,\n         grafana_finish: to\n      };\n   }\n\n   buildField(options, target, obj, data, alias, name, format, timefilter) {\n      var field, arr, i, opts, json;\n\n      field = {};\n\n      if (timefilter) {\n         field.timefilter = timefilter;\n      }\n      if (data.hide) {\n         field.hide = data.hide;\n      }\n\n      if (name.indexOf('.') > -1) {\n         arr = name.split('.');\n         field.object = arr[0];\n         field.field = arr[1];\n      }\n      else {\n         field.field = name;\n      }\n\n      /* Set the format if necessary */\n      if (format && format !== 'Select format') {\n         field.grafana_format = format;\n         field.formats = [format];\n      }\n\n      /* Set the aggregation format if necessary */\n      if (data.aggregation_format && data.aggregation_format !== 'Select aggregation type' && alias !== target.pivot_field) {\n         field.aggregation_format = this.templateSrv.replace(data.aggregation_format, options.scopedVars);\n      }\n\n      /* Check for a filter */\n      if (target.filters) {\n         for (i = 0; i < target.filters.length; i++) {\n            if (target.filters[i].field === alias) {\n               field.filter = {query: this.templateSrv.replace(target.filters[i].query, options.scopedVars, this.formatSQLTemplate)};\n               if (target.filters[i].format !== 'Select format') {\n                  field.filter.format = this.templateSrv.replace(target.filters[i].format, options.scopedVars);\n               }\n            }\n         }\n      }\n\n      /* Check for sorting */\n      if (target.sortby) {\n         for (i = 0; i < target.sortby.length; i++) {\n            if (target.sortby[i].field === alias) {\n               field.sort = {\n                  priority: i + 1,\n                  order: target.sortby[i].order\n               };\n               if (target.sortby[i].format !== 'Select format') {\n                  field.sort.format = this.templateSrv.replace(target.sortby[i].format, options.scopedVars);\n               }\n            }\n         }\n      }\n\n      /* Add any field options */\n      if (data.opts) {\n         opts = this.templateSrv.replace(data.opts, options.scopedVars, this.formatJSONTemplate);\n         json = _.attempt(JSON.parse, opts);\n         if (_.isError(json)) {\n            throw {message: 'Error in ' + alias + ' options: ' + json.message};\n         }\n         field = _.merge(field, json);\n      }\n\n      if (obj.fields[alias]) {\n         throw {message: 'Duplicate field names defined (' + alias + ')'};\n      }\n      obj.fields[alias] = field;\n   }\n\n   buildCommand(options) {\n      var i, j, k, n, timefilter, target, obj, object_opts, json, custom;\n      var alias, aggr, fld_json, fmt_json, field_name, fmt, grp, arr;\n      var objects = [];\n\n      /* Create the objects */\n      for (i = 0; i < options.targets.length; i++) {\n         target = options.targets[i];\n\n         /* Convert the timefilter to valid tfc */\n         timefilter = this.getTimefilter(options, target);\n\n         if (target.rawMode) {\n            target = _.attempt(JSON.parse, target.rawQuery);\n            if (_.isError(target)) {\n               throw {message: 'Raw query decode failed'};\n            }\n         }\n\n         if ( ! target.object) {\n            throw {message: 'No object provided'};\n         }\n         if (target.hide) {\n            continue;\n         }\n\n         obj = {\n            type: this.templateSrv.replace(target.object, options.scopedVars),\n            limit: parseInt(this.templateSrv.replace(target.limit.toString(), options.scopedVars)),\n            offset: parseInt(this.templateSrv.replace(target.offset.toString(), options.scopedVars)),\n            grafana_output: target.output,\n            fields: {}\n         };\n\n         if (isNaN(obj.limit) || isNaN(obj.offset)) {\n            throw {message: 'Limit and Offset must be integers'};\n         }\n\n         if (target.pivot_field && target.pivot_field !== 'Select field') {\n            obj.grafana_pivot_field = target.pivot_field;\n         }\n\n         /* Add any object options */\n         if (target.object_opts) {\n            object_opts = this.templateSrv.replace(target.object_opts, options.scopedVars, this.formatJSONTemplate);\n            json = _.attempt(JSON.parse, object_opts);\n            if (_.isError(json)) {\n               throw {message: 'Error in Object options: ' + json.message};\n            }\n            obj = _.merge(obj, json);\n         }\n\n         /* Add the global filter */\n         if (target.adv_filter) {\n            obj.filter = this.templateSrv.replace(target.adv_filter, options.scopedVars, this.formatSQLTemplate);\n         }\n\n         /* Add the groups */\n         if (target.groups && target.groups.length > 0) {\n            obj.groups = [];\n            for (j = 0; j < target.groups.length; j++) {\n               if (target.groups[j].id) {\n                  obj.groups.push(target.groups[j].id);\n               }\n               else {\n                  /* This is a variable */\n                  grp = this.templateSrv.replace(target.groups[j].name, options.scopedVars, 'csv');\n                  arr = grp.split(',');\n                  for (k = 0; k < arr.length; k++) {\n                     if (isNaN(arr[k])) {\n                        obj.groups.push(arr[k]);\n                     }\n                     else {\n                        obj.groups.push(parseInt(arr[k]));\n                     }\n                  }\n               }\n            }\n         }\n\n         /* Add the group by */\n         if (target.output === 'ts_table') {\n            obj.group_by = ['(({' + target.pivot_field + '} - ' + timefilter.grafana_start + ') - ({' + target.pivot_field + '} - ' + timefilter.grafana_start + ') % ' + timefilter.interval + ') / ' + timefilter.interval];\n         }\n         else if (target.groupby && target.groupby.length > 0) {\n            obj.group_by = [];\n            for (j = 0; j < target.groupby.length; j++) {\n               aggr = target.groupby[j];\n               field_name = this.templateSrv.replace(aggr.field, options.scopedVars);\n               fmt = this.templateSrv.replace(aggr.format, options.scopedVars);\n               custom = this.templateSrv.replace(aggr.custom, options.scopedVars);\n\n               if (aggr.field === '~All~') {\n                  obj.group_by.push('0');\n               }\n               else if (aggr.field === '~Custom~') {\n                  obj.group_by.push(custom);\n               }\n               else if (aggr.format === 'Select format') {\n                  obj.group_by.push('{' + field_name + '}');\n               }\n               else {\n                  obj.group_by.push('{' + field_name + ':' + fmt + '}');\n               }\n            }\n         }\n\n         /* Add the fields */\n         for (j = 0; j < target.fields.length; j++) {\n\n            /* Check for a multi-fields or formats */\n            field_name = this.templateSrv.replace(target.fields[j].name, options.scopedVars);\n            fmt = this.templateSrv.replace(target.fields[j].format, options.scopedVars);\n            fld_json = _.attempt(JSON.parse, this.templateSrv.replace(target.fields[j].name, options.scopedVars, this.formatJSONTemplate));\n            fmt_json = _.attempt(JSON.parse, this.templateSrv.replace(target.fields[j].format, options.scopedVars, this.formatJSONTemplate));\n\n            if (_.isArray(fld_json)) {\n               /* Field is a multi-value, so add each field in the list */\n               for (k = 0; k < fld_json.length; k++) {\n                  alias = target.fields[j].alias ? target.fields[j].alias + ' ' + fld_json[k] : fld_json[k];\n                  if (_.isArray(fmt_json)) {\n                     /* Format is a multi-value, so add each format as a separate field */\n                     for (n = 0; n < fmt_json.length; n++) {\n                        this.buildField(options, target, obj, target.fields[j], alias + '-' + fmt_json[n], fld_json[k], fmt_json[n], timefilter);\n                     }\n                  }\n                  else {\n                     this.buildField(options, target, obj, target.fields[j], alias, fld_json[k], fmt, timefilter);\n                  }\n               }\n            }\n            else {\n               alias = target.fields[j].alias ? target.fields[j].alias : field_name;\n               if (_.isArray(fmt_json)) {\n                  /* Format is a multi-value, so add each format as a separate field */\n                  for (n = 0; n < fmt_json.length; n++) {\n                     this.buildField(options, target, obj, target.fields[j], alias + '-' + fmt_json[n], field_name, fmt_json[n], timefilter);\n                  }\n               }\n               else {\n                  this.buildField(options, target, obj, target.fields[j], alias, field_name, fmt, timefilter);\n               }\n            }\n         }\n\n         /* Make sure the id field is given */\n         if ( ! obj.fields.id) {\n            obj.fields.id = {\n               field: 'id',\n               hide: true\n            };\n         }\n\n         objects.push(obj);\n      }\n\n      return {\n         command: 'get',\n         user: 'admin',\n         objects\n      };\n   }\n\n   getApiValue(value, field) {\n      var val = value;\n\n      if (field.grafana_format && typeof value === 'object') {\n         if (value && field.grafana_format in value) {\n            val = value[field.grafana_format];\n         }\n         else {\n            val = null;\n         }\n      }\n\n      return val;\n   }\n\n   processQueryResult(command, result) {\n      var i, cmd, res, row, key;\n      var output = {data: []};\n\n      if ( ! result.data || ! result.data.data || ! result.data.data.objects) {\n         throw {message: 'Malformed API response'};\n      }\n\n      for (i = 0; i < result.data.data.objects.length; i++) {\n         cmd = command.objects[i];\n         res = result.data.data.objects[i];\n         if (cmd.group_by && cmd.group_by.length > 0 && res.data.length === 0) {\n            /* Add a default aggregate row for no data */\n            row = [];\n            for (key in cmd.fields) {\n               if ( ! cmd.fields.hasOwnProperty(key) || cmd.fields[key].hide) {\n                  continue;\n               }\n\n               row = {};\n               switch (cmd.fields[key].aggregation_format) {\n               case 'count':\n               case 'count_all':\n                  if (cmd.fields[key].grafana_format) {\n                     row[key] = {};\n                     row[key][cmd.fields[key].grafana_format] = 0;\n                  }\n                  else {\n                     row[key] = 0;\n                  }\n                  break;\n               default:\n                  if (cmd.fields[key].grafana_format) {\n                     row[key] = {};\n                     row[key][cmd.fields[key].grafana_format] = null;\n                  }\n                  else {\n                     row[key] = null;\n                  }\n                  break;\n               }\n\n               res.data.push(row);\n               res.data_total = 1;\n            }\n         }\n      }\n\n      /* Loop over each object */\n      for (i = 0; i < result.data.data.objects.length; i++) {\n         if (command.objects[i].grafana_output === 'timeseries') {\n            output.data = _.concat(output.data, this.processQueryResultTimeseries(command.objects[i], result.data.data.objects[i]));\n\n         }\n         else if (command.objects[i].grafana_output === 'ts_table') {\n            output.data = _.concat(output.data, this.processQueryResultTableAsTimeseries(command.objects[i], result.data.data.objects[i]));\n         }\n         else {\n            this.mergeTableResults(output.data, this.processQueryResultTable(command.objects[i], result.data.data.objects[i]));\n         }\n      }\n\n      return output;\n   }\n\n   mergeTableResults(data, table) {\n      var i, j, k;\n\n      if (data.length === 0) {\n         data.push(table);\n\n         return;\n      }\n\n      for (i = 0; i < data.length; i++) {\n         if ( ! data[0].type || data[0].type !== 'table') {\n            continue;\n         }\n\n         /* Add columns */\n         for (j = 0; j < table.columns.length; j++) {\n            data[i].columns.push(table.columns[j]);\n         }\n\n         /* Add rows */\n         for (j = 0; j < data[0].rows.length; j++) {\n            if (j < table.rows.length) {\n               for (k = 0; k < table.columns.length; k++) {\n                  data[0].rows[j].push(table.rows[j][k]);\n               }\n            }\n         }\n      }\n   }\n\n   processQueryResultTableAsTimeseries(cmdObj, resObj) {\n      /* Pivot the results and aggregate against the provided 'time' field */\n      var t, i, j, key, pivot_val, val, datapoints, index, tf;\n      var result = [];\n      var fields = [];\n\n      if ( ! cmdObj.grafana_pivot_field) {\n         throw {message: '\"Time field\" not provided'};\n      }\n      tf = cmdObj.fields[cmdObj.grafana_pivot_field].timefilter;\n\n      /* Initialise result */\n      for (key in cmdObj.fields) {\n         if ( ! cmdObj.fields.hasOwnProperty(key) || key === cmdObj.grafana_pivot_field || cmdObj.fields[key].hide) {\n            continue;\n         }\n         fields.push(key);\n         datapoints = [];\n         for (t = tf.grafana_start; t < tf.grafana_finish; t += tf.interval) {\n            datapoints.push([null, t * 1000]);\n         }\n         result.push({target: key, datapoints});\n      }\n\n      /* Loop over the rows */\n      for (i = 0; i < resObj.data.length; i++) {\n         pivot_val = this.getApiValue(resObj.data[i][cmdObj.grafana_pivot_field], cmdObj.fields[cmdObj.grafana_pivot_field]);\n         if (isNaN(pivot_val) || pivot_val < tf.grafana_start || pivot_val >= tf.grafana_finish) {\n            /* Invalid value for pivot */\n            continue;\n         }\n         index = Math.floor((pivot_val - tf.grafana_start) / tf.interval);\n\n         for (j = 0; j < fields.length; j++) {\n            val = this.getApiValue(resObj.data[i][fields[j]], cmdObj.fields[fields[j]]);\n            if ( ! isNaN(val)) {\n               result[j].datapoints[index][0] = val;\n            }\n         }\n      }\n\n      return result;\n   }\n\n   processQueryResultTimeseries(cmdObj, resObj) {\n      var i, j, time, key, subname, field, value, datapoints, rowData;\n      var result = [];\n\n      /* Loop over the rows */\n      for (i = 0; i < resObj.data.length; i++) {\n\n         /* Loop over each field (that isn't hidden) */\n         subname = null;\n         rowData = [];\n         for (key in cmdObj.fields) {\n            if ( ! cmdObj.fields.hasOwnProperty(key)) {\n               continue;\n            }\n            field = cmdObj.fields[key];\n            value = this.getApiValue(resObj.data[i][key], field);\n            if (field.hide) {\n               continue;\n            }\n            if (value === null) {\n               /* Value is null */\n               result.push({target: key, datapoints: []});\n               continue;\n            }\n\n            datapoints = [];\n            if (_.isArray(value)) {\n               /* Value is an array */\n               time = field.timefilter.grafana_start;\n               for (j = 0; j < value.length; j++) {\n                  datapoints.push([value[j], time * 1000]);\n                  time += field.timefilter.interval;\n               }\n            }\n            else if ( ! isNaN(value)) {\n               /* Value is a number */\n               for (time = field.timefilter.grafana_start; time <= field.timefilter.grafana_finish; time += field.timefilter.interval) {\n                  datapoints.push([value, time * 1000]);\n               }\n            }\n            else if (typeof value === 'string') {\n               subname = subname ? subname + ' ' + value : value;\n               continue;\n            }\n\n            rowData.push({target: key, datapoints});\n         }\n\n         /* Append the subname if provided */\n         if (subname) {\n            for (j = 0; j < rowData.length; j++) {\n               rowData[j].target = rowData[j].target + ' (' + subname + ')';\n            }\n         }\n         result = _.concat(result, rowData);\n      }\n\n      return result;\n   }\n\n   processQueryResultTable(cmdObj, resObj) {\n      var i, j, row, field, value, column;\n      var result = {\n         columns: [],\n         rows: [],\n         type: 'table'\n      };\n\n      _.forOwn(cmdObj.fields, (val, key) => {\n         if ( ! val.hide) {\n            column = {text: key};\n            if (val.sort && val.sort.priority === 1) {\n               column.sort = true;\n               column.desc = val.sort.order === 'desc';\n            }\n            result.columns.push(column);\n         }\n      });\n\n      /* Loop over the rows */\n      for (i = 0; i < resObj.data.length; i++) {\n         row = [];\n\n         /* Loop over each field (that isn't hidden) */\n         for (j = 0; j < result.columns.length; j++) {\n            field = cmdObj.fields[result.columns[j].text];\n            value = this.getApiValue(resObj.data[i][result.columns[j].text], field);\n            if (value === null) {\n               /* Value is null */\n               row.push(null);\n               continue;\n            }\n\n            if ( ! isNaN(value) || typeof value === 'string') {\n               /* Value is a scalar */\n               if (field.grafana_timestamp) {\n                  row.push(value * 1000);\n               }\n               else {\n                  row.push(value);\n               }\n            }\n            else {\n               /* Cannot represent value */\n               row.push(null);\n            }\n         }\n\n         result.rows.push(row);\n      }\n\n      return result;\n   }\n\n   formatSQLTemplate(value, variable, fn) {\n      var i;\n      var output = [];\n\n      if (_.isArray(value)) {\n         for (i = 0; i < value.length; i++) {\n            if ( ! isNaN(value[i])) {\n               output.push(value[i]);\n            }\n            else if (typeof value[i] === 'string') {\n               output.push('\\'' + value[i].replace('\\'', '\\'\\'') + '\\'');\n            }\n         }\n\n         return output.join();\n      }\n      else if ( ! isNaN(value)) {\n         return value;\n      }\n      else if (typeof value === 'string') {\n         return '\\'' + value.replace('\\'', '\\'\\'') + '\\'';\n      }\n\n      return value;\n   }\n\n   formatJSONTemplate(value, variable, fn) {\n      var i;\n      var output = [];\n\n      if (_.isArray(value)) {\n         for (i = 0; i < value.length; i++) {\n            if ( ! isNaN(value[i])) {\n               output.push(parseInt(value[i]));\n            }\n            else if (typeof value[i] === 'string') {\n               output.push(value[i]);\n            }\n         }\n\n         return JSON.stringify(output);\n      }\n      else if (typeof value === 'string') {\n         return '\"' + value.replace('\"', '\\\\\"') + '\"';\n      }\n\n      return value;\n   }\n\n}\n\n"]}